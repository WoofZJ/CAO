@using CAO.Shared.Dtos;

@page "/blog/{Slug}"
@inject BlogService blogService

@if (loading)
{
    <PageTitle>CodeArt.Online - 博客</PageTitle>
    <Loading message="加载博客中..." />
}
else
{
    if (html is null || metadata is null)
    {
        <PageTitle>CodeArt.Online - 博客</PageTitle>
        <Alert type="error" message="服务器暂不可用，过会再来看看吧 ;-;" />
    }
    else
    {
        <PageTitle>CodeArt.Online - @metadata.Title</PageTitle>
        <div class="px-6 lg:px-0 lg:w-3/4 flex flex-col mx-auto">
            @if (!string.IsNullOrEmpty(metadata.ImageUrl))
            {
                <img src="@metadata.ImageUrl" class="max-h-80 object-cover" />
            }
			<div class="divider"></div>
			<div class="flex flex-col gap-y-1 items-center">
				<h1 class="text-3xl font-bold text-center">
                    @metadata.Title
				</h1>
				<div class="flex flex-col lg:flex-row items-center gap-x-5">
                    <div class="flex flex-row items-center gap-x-1">
                        创建于
                        <DateTimeWidget UtcDateTime="@metadata.CreatedAt"/>
                    </div>
                    @if (metadata.CreatedAt != metadata.UpdatedAt)
                    {
                        <div class="flex flex-row items-center gap-x-1">
                            更新于
                            <DateTimeWidget UtcDateTime="@metadata.UpdatedAt"/>
                        </div>
                    }
				</div>
				<ul
					class="flex flex-row flex-wrap justify-around items-center gap-x-1"
				>
					<TagsWidget	Tags="@metadata.Tags"/>
				</ul>
				@if (!string.IsNullOrEmpty(metadata.Description))
                {
                    <p class="bg-base-200 w-full mt-2 px-8 py-4">
                        @metadata.Description
                    </p>
				}
			</div>
			<div class="divider"></div>
			<article
				class="prose max-w-full prose-headings:my-2 prose-img:my-2 prose-hr:my-5 prose-p:my-1 prose-li:my-1 prose-ul:my-1 prose-ol:my-1 prose-blockquote:my-5"
			>
                @((MarkupString)html.HtmlContent)
			</article>
		</div>
    }
}

@code {
    [Parameter]
    public string Slug { get; set; } = string.Empty;
    BlogHtmlResponse? html;
    BlogMetadataResponse? metadata;
    bool loading;
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        if (!string.IsNullOrEmpty(Slug))
        {
            html = await blogService.GetBlogHtmlAsync(Slug);
            metadata = await blogService.GetBlogMetadataAsync(Slug);
        }
        loading =false;
    }
}